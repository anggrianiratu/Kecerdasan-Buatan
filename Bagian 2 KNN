import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
import warnings
warnings.filterwarnings('ignore')


# coordinates to grid
def convert_to_grid(df):
    df['x'] = pd.qcut(df['lon'], q=10, labels=False, duplicates='drop')
    df['y'] = pd.qcut(df['lat'], q=10, labels=False, duplicates='drop')
    df.dropna(subset=['x', 'y'], inplace=True)
    df['hour'] = df['datetime'].dt.hour
    return df.astype({'x': int, 'y': int, 'hour': int})

# Train model
def train_model(df):
    X = df[['hour']]
    y = df['x'].astype(str) + '-' + df['y'].astype(str)
    knn = KNeighborsClassifier(n_neighbors=3)
    knn.fit(X, y)
    return knn

# visualization with path
def plot_prediction(start, goal, hour):
    fig, ax = plt.subplots(figsize=(8, 8))
    
    # grid background
    grid = np.ones((10, 10)) * 0.2
    grid[start[1], start[0]] = 0.6  # Start position
    grid[goal[1], goal[0]] = 0.9    # Goal position
    
    # path from start to goal
    path_x = [start[0], goal[0]]
    path_y = [start[1], goal[1]]
    
    if start[0] != goal[0] and start[1] != goal[1]:
        # Create L-shaped path (horizontal first, then vertical)
        path_x = [start[0], goal[0], goal[0]]
        path_y = [start[1], start[1], goal[1]]
        
        for i in range(len(path_x)-1):
            x1, y1 = path_x[i], path_y[i]
            x2, y2 = path_x[i+1], path_y[i+1]
            
            # Horizontal path
            if y1 == y2:
                for x in range(min(x1, x2), max(x1, x2) + 1):
                    if (x, y1) != start and (x, y1) != goal:
                        grid[y1, x] = 0.4
            # Vertical path
            else:
                for y in range(min(y1, y2), max(y1, y2) + 1):
                    if (x1, y) != start and (x1, y) != goal:
                        grid[y, x1] = 0.4
    
    ax.imshow(grid, cmap='gray', origin='lower')
    
    ax.plot(path_x, path_y, 'yellow', linewidth=3, alpha=0.8, marker='o', markersize=4)
    
    for i in range(11):
        ax.axhline(i-0.5, color='white', linewidth=0.5)
        ax.axvline(i-0.5, color='white', linewidth=0.5)
    
    ax.text(start[0], start[1], 'Start', ha='center', va='center', 
            color='red', fontweight='bold', fontsize=10)
    ax.text(goal[0], goal[1], 'Goal', ha='center', va='center', 
            color='blue', fontweight='bold', fontsize=10)
    
    distance = abs(goal[0] - start[0]) + abs(goal[1] - start[1])
    ax.text(0.02, 0.98, f'Distance: {distance} units', transform=ax.transAxes,
            bbox=dict(boxstyle="round,pad=0.3", facecolor='yellow', alpha=0.7),
            fontsize=10, verticalalignment='top')
    
    ax.set_title(f'Location Prediction for Hour {hour}', fontsize=14, fontweight='bold')
    ax.set_xlabel('X Coordinate')
    ax.set_ylabel('Y Coordinate')
    ax.set_xticks(range(10))
    ax.set_yticks(range(10))
    
    plt.tight_layout()
    plt.show()

# Main execution
file_path = r"C:\Users\user\Downloads\Geolife Trajectories 1.3\Data\169\Trajectory\20100510104928.plt"
df = pd.read_csv(file_path, skiprows=6, header=None)
df.columns = ['lat', 'lon', 'zero', 'alt', 'excel_time', 'date', 'time']
df['datetime'] = pd.to_datetime(df['date'] + ' ' + df['time'])
df = df[['datetime', 'lat', 'lon']]

df = convert_to_grid(df)

knn = train_model(df)

# Get user input
jam = int(input("Current hour (0-23): "))
x_awal = int(input("Current X coordinate (0-9): "))
y_awal = int(input("Current Y coordinate (0-9): "))

start = (x_awal, y_awal)
prediction = knn.predict([[jam]])[0]
x_tujuan, y_tujuan = map(int, prediction.split('-'))
goal = (x_tujuan, y_tujuan)

# Display results
print(f"\nCurrent position: {start}")
print(f"Predicted destination at hour {jam}: {goal}")

plot_prediction(start, goal, jam)
