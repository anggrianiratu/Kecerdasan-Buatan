import heapq

# Fungsi heuristik (Manhattan Distance)
def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# Algoritma A* Search
def astar(grid, start, goal):
    open_list = []
    heapq.heappush(open_list, (heuristic(start, goal), 0, start, [start]))
    visited = set()

    while open_list:
        _, cost, current, path = heapq.heappop(open_list)
        if current in visited:
            continue
        if current == goal:
            return path
        visited.add(current)

        for dx, dy in [(0,1),(1,0),(-1,0),(0,-1)]:
            nx, ny = current[0] + dx, current[1] + dy
            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 0:
                heapq.heappush(open_list, (cost + 1 + heuristic((nx, ny), goal), cost + 1, (nx, ny), path + [(nx, ny)]))
    return None

# Fungsi untuk menampilkan grid dengan rute
def print_grid_with_path(grid, path, start, goal):
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if (i, j) == start:
                print('S', end=' ')
            elif (i, j) == goal:
                print('G', end=' ')
            elif (i, j) in path:
                print('*', end=' ')
            elif grid[i][j] == 1:
                print('#', end=' ')
            else:
                print('.', end=' ')
        print()

# Data otomatis (tanpa input)
grid = [
    [0, 0, 0, 0],
    [1, 1, 0, 1],
    [0, 0, 0, 0],
    [0, 1, 1, 0]
]

start = (0, 0)
goal = (3, 3)

print("=== PENCARIAN RUTE DENGAN A* SEARCH ===\n")
path = astar(grid, start, goal)

if path:
    print("Rute ditemukan:")
    print_grid_with_path(grid, path, start, goal)
    print("\nDetail rute:")
    print(" -> ".join(map(str, path)))
    print(f"Total langkah: {len(path)-1}")
else:
    print("Tidak ada rute yang ditemukan.")
